require 'active_record'    # => true
require_relative 'lipsum'  # => true

ActiveRecord::Base.establish_connection(  # => ActiveRecord::Base
  adapter:  'sqlite3',                    # => "sqlite3"
  database: 'development.sqlite3'         # => "development.sqlite3"
)                                         # => #<ActiveRecord::ConnectionAdapters::ConnectionPool:0x007f87839e1aa8 @mon_owner=nil, @mon_count=0, @mon_mutex=#<Thread::Mutex:0x007f87839e1990>, @query_cache_enabled=#<Concurrent::Map:0x007f87839e1968 entries=0 default_proc=#<Proc:0x007f87839e1918@/Users/mstashev/.rvm/gems/ruby-2.4.0/gems/activerecord-5.0.1/lib/active_record/connection_adapters/abstract/query_cache.rb:27>>, @spec=#<ActiveRecord::ConnectionAdapters::ConnectionSpecification:0x007f87839ebb20 @name="primary", @config={:adapter=>"sqlite3", :database=>"development.sqlite3"}, @adapter_method="sqlite3_connection">, @checkout_timeout=5, @reaper=#<ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper:0x007f87839e18a0 @pool=#<ActiveRecord::ConnectionAdapters::ConnectionPool:0x007f87839e1aa8 ...>, @frequency=nil>, @size=5, @thread_cached_conns=#<Concurrent::Map:0x007f87839e1850 entries=0 default_proc=nil>, @connections=[], @automatic_reconnect=true, @now_connecting=0, @threads_bl...

class ApplicationMigration < ActiveRecord::MigrationctiveRecord::Migration
  def self.up
    create_table :lipsums, force: true do |t|
      t.text    :title
      t.string  :text
    end
    Lipsum.create :title => 'tenth_doctor_ipsum',    :text =>"<p>Sweet, maybe... Passionate, I suppose... But don't ever mistake that for nice. There's something else I've always wanted to say: Allons-y, Alonso! I'm Dr. James McCrimmon from the township of Balamory. People assume that time is a strict progression of cause-and-effect... but actually, from a non-linear, non-subjective viewpoint, it's more like a big ball of wibbly-wobbly... timey-wimey... stuff. River, you know my name. You whispered my name in my ear! There's only one reason I would ever tell anyone my name. There's only one time I could...</p>"
    Lipsum.create :title => 'eleventh_doctor_ipsum', :text =>"<p>I know. Dinosaurs! On a spaceship! I once spent a hell of a long time trying to get a gobby Australian to Heathrow airport. Brave heart, Clara. I never know why. I only know who. No idea. Just do what I do: hold tight and pretend it's a plan. It's a fez. I wear a fez now. Fezzes are cool. Oh, I always rip out the last page of a book. Then it doesn't have to end. I hate endings! Bow ties are cool. Frightened people. Give me a Dalek any day. Please tell me I didn't get old. Anything but old. I was young! Oh... is he grey?</p>"
    Lipsum.create :title => 'twelfth_doctor_ipsum',  :text =>"<p>Please just... just see me. I don't know. But I'd probably blame the English. Shush. I was being chased by a giant dinosaur, but I think I've managed to give it the slip. Oh, you've got a dinosaur too! Well, you're very similar heights. Maybe you should wear labels. I'm Scottish. I can complain about things now. I can really complain about things now. He was dead already, I'm saving us. Follow me, and run! I don't think that I'm a hugging person now. Clara, I'm not your boyfriend. I never said it was your mistake.</p>"
  endup
endup

begin ApplicationMigration.migrate(:up) end
